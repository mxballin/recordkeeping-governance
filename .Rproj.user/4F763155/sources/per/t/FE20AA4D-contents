---
title: "Commission Visualisation"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| echo: false
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(formattable))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(RColorBrewer))
```

You can add options to executable code like this

```{r}
#| echo: false
library(plotly)

# Read in data
df <- read.csv("commissionsdatabase.csv", stringsAsFactors = F)

# Convert to dates
df$md <- as.Date(df$md, format="%d/%m/%Y")

# Choose colors based on number of resources
cols <- RColorBrewer::brewer.pal(length(unique(df$Resource)), name = "Set3")
df$color <- factor(df$Resource, labels = cols)

# Initialize empty plot
fig <- plot_ly()

# Each task is a separate trace
# Each trace is essentially a thick line plot
# x-axis ticks are dates and handled automatically

for(i in 1:(nrow(df) - 1)){
 fig <- add_trace(fig,
                 x = c(df$md[i], df$md[i] + df$Duration[i]),  # x0, x1
                 y = c(i, i),  # y0, y1
                 mode = "lines",
                 line = list(color = df$color[i], width = 20),
                 showlegend = F,
                 hoverinfo = "text",

                 # Create custom hover text

                 text = paste("Task: ", df$Task[i], "<br>",
                              "Resource: ", df$Resource[i]),

                  evaluate = T  # needed to avoid lazy loading
  )
}

fig <- layout(fig,

            # Axis options:
            # 1. Remove gridlines
            # 2. Customize y-axis tick labels and show task names instead of numbers

            yaxis = list(showgrid = F), tickmode = "array", tickvals = 1:nrow(df),  ticktext = unique(df$Task))

fig

```

```{r}
commissions <- read.csv("commissionsdatabaseggplot.csv", stringsAsFactors = F)
commissions$start <- as.Date(commissions$start, format="%d/%m/%Y")
commissions$end <- as.Date(commissions$end,format="%d/%m/%Y")

commissions

p <- ggplot(commissions) +
      geom_linerange(aes(y = title, 
                         xmin = start,
                         xmax = end,
                         colour = country),
                     size = I(20))+
  labs( y=NULL)

ggplotly(p)
```
